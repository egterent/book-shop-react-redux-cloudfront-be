/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import Product from './Product';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {Product};
export const ProductSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "properties": {
    "author": {
      "type": "string"
    },
    "count": {
      "type": "number",
      "minimum": 0
    },
    "description": {
      "type": "string"
    },
    "id": {
      "pattern": "^[0-9a-z]{8}(-[0-9a-z]{4}){3}-[0-9a-z]{12}$",
      "type": "string"
    },
    "isbn": {
      "pattern": "^[0-9]{13}$",
      "type": "string"
    },
    "price": {
      "type": "number",
      "minimum": 0
    },
    "publisher": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "year": {
      "maximum": 2200,
      "minimum": 1,
      "type": "integer"
    }
  },
  "required": [
    "count",
    "isbn",
    "price",
    "publisher",
    "title",
    "year"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isProduct = ajv.compile(ProductSchema) as ValidateFunction<Product>;
export default function validate(value: unknown): Product {
  if (isProduct(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isProduct.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Product'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
